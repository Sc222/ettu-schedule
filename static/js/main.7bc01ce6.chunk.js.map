{"version":3,"sources":["CustomSearch.js","MainToolbar.js","App.js","index.js"],"names":["CustomSearch","props","state","ref","getStops","error","updateSchedule","Autocomplete","id","loading","this","length","loadingText","options","onChange","event","value","getOptionLabel","option","nameWithDirection","getOptionDisabled","style","width","renderInput","params","TextField","label","variant","console","log","name","React","Component","MainToolbar","AppBar","position","Toolbar","edge","marginRight","Typography","flexGrow","stopsSort","stops","sort","a","b","localeCompare","stopsJsonToArray","stopsJson","i","push","getCurrentTimeStr","date","Date","hours","getHours","minutes","getMinutes","App","scheduleInfo","setState","loadSchedule","isTrams","tramStops","trolleyStops","getTrolleyColor","getTramColor","schedule","isScheduleLoading","lastUpdateTime","loadTramStops","loadTrolleyStops","fetch","then","res","json","catch","err","toString","Error","distanceRemaining","className","styles","root","Container","maxWidth","marginTop","marginBottom","Paper","elevation","paddingTop","paddingLeft","paddingRight","paddingBottom","Grid","container","direction","justify","color","Divider","alignItems","IconButton","margin","onClick","onTramIcClick","aria-label","fontSize","onTrolleyIcClick","LinearProgress","visibility","marginLeft","TableContainer","Table","size","TableHead","TableRow","TableCell","colSpan","flex","minWidth","whiteSpace","overflow","textOverflow","Box","fontWeight","display","TableBody","align","map","tmp","component","scope","timeRemaining","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7bc01ce6.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nexport default class CustomSearch extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ref:this.props.ref,\n            getStops: this.props.getStops,\n            error:false,\n            updateSchedule:this.props.updateSchedule,\n        };\n    }\n\n    render() {\n        return (\n            <Autocomplete\n                id=\"search\"\n                loading={this.state.getStops().length===0}\n                loadingText={\"Загрузка...\"}\n                options={this.state.getStops()}\n                onChange={(event, value) => this.updateSchedule(value)}\n                getOptionLabel={option => option.nameWithDirection}\n                getOptionDisabled={option => option.id===-1}//loading option is disabled\n                style={{width: \"100%\"}}\n                renderInput={params => <TextField {...params} error ={this.state.error} label=\"Остановка\" variant=\"outlined\"/>}\n            />\n        );\n    }\n\n    updateSchedule(value) {\n        if(value!==null) {\n            console.log(\"selected stop: \" + value.id + \"  \" + value.nameWithDirection);\n            this.state.updateSchedule({id: value.id, name: value.nameWithDirection});\n        }\n    }\n}\n","import ScheduleIcon from \"@material-ui/icons/EventNoteTwoTone\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n\nexport default class MainToolbar extends React.Component{\n\n    render() {\n        return <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n                <ScheduleIcon edge=\"start\" style={{marginRight: 16}}/>\n                <Typography variant=\"h6\" style={{flexGrow:1}}>\n                    Ettu Schedule\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    }\n}","import React from 'react';\nimport styles from './App.css';\nimport CustomSearch from \"./CustomSearch\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Container from \"@material-ui/core/Container\";\nimport TramIcon from '@material-ui/icons/TramTwoTone';\nimport TrolleybusIcon from '@material-ui/icons/DirectionsBusTwoTone';\nimport UpdateIcon from '@material-ui/icons/RefreshTwoTone';\nimport Divider from \"@material-ui/core/Divider\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport {TableContainer} from \"@material-ui/core\";\nimport MainToolbar from \"./MainToolbar\"\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nfunction stopsSort(stops) {\n    stops.sort(function (a, b) {\n        return a.nameWithDirection.localeCompare(b.nameWithDirection)\n    });\n    return stops;\n}\n\nfunction stopsJsonToArray(stopsJson) {\n    let stops = [];\n    for (let i = 0; i < stopsJson.length; i++)\n        stops.push(stopsJson[i]);\n    return stops;\n}\n\nfunction getCurrentTimeStr() {\n    let date = new Date();\n    let hours = date.getHours();\n    let minutes = date.getMinutes();\n    hours = hours < 10 ? \"0\" + hours : hours;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    return hours + \":\" + minutes;\n}\n\nexport default class App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tramStops: [],\n            trolleyStops: [],\n            isTrams: true, //trams or trolleys\n            schedule: null, //null - start, \"error\" - error, [] - no schedule for stop\n            scheduleInfo: null,\n            isScheduleLoading: false,\n            lastUpdateTime: \"\"\n        };\n    }\n\n    componentDidMount() {\n        this.loadTramStops();\n        this.loadTrolleyStops();\n    }\n\n    loadTramStops() {\n        fetch(\"https://ettu-schedule.herokuapp.com/tram-stops\")\n            .then(res => res.json())\n            .then(res => stopsJsonToArray(res))\n            .then(res => stopsSort(res))\n            .then(res => this.setState({tramStops: res}))\n            .catch(err => console.log(err.toString()));\n    }\n\n    loadTrolleyStops() {\n        fetch(\"https://ettu-schedule.herokuapp.com/trolley-stops\")\n            .then(res => res.json())\n            .then(res => stopsJsonToArray(res))\n            .then(res => stopsSort(res))\n            .then(res => this.setState({trolleyStops: res}))\n            .catch(err => console.log(err.toString()));\n    }\n\n    loadSchedule(scheduleInfo) {\n        if (scheduleInfo == null)\n            return;\n        console.log(\"loading: \" + scheduleInfo);\n        this.setState({isScheduleLoading: true});\n        fetch(\"https://ettu-schedule.herokuapp.com/transport-near-stops/\" + scheduleInfo.id)\n            .then(res => res.json())\n            .then(res => {\n                this.setState({isScheduleLoading: false});\n                if (res.length === 0)\n                    return [];\n                if (res[0].name !== \"error\")\n                    return res;\n                else\n                    throw new Error(\"error getting schedule: \" + res);\n            })\n            .then(res => {\n                res.sort(function (a, b) {\n                        return a.distanceRemaining - b.distanceRemaining;\n                    }\n                );\n                this.setState({schedule: res});\n                this.setState({lastUpdateTime: getCurrentTimeStr()})\n            })\n            .catch(err => {\n                //todo process getting schedule errors\n                this.setState({schedule: \"error\"});\n                console.log(err.toString());\n            });\n    }\n\n\n    updateSchedule = (scheduleInfo) => {\n        console.log(\"update sched: \" + scheduleInfo.id + \" \" + scheduleInfo.name);\n        this.setState({scheduleInfo: scheduleInfo});\n        this.loadSchedule(scheduleInfo);\n    };\n\n    getStops = () => {\n        if (this.state.isTrams)\n            return this.state.tramStops;\n        else\n            return this.state.trolleyStops;\n    };\n\n    getTrolleyColor = () => {\n        return this.state.isTrams ? \"default\" : \"primary\";\n    };\n\n    getTramColor = () => {\n        return this.state.isTrams ? \"primary\" : \"default\";\n    };\n\n    onTrolleyIcClick() {\n        if (this.state.trolleyStops.length === null) //load stops if they weren't\n            this.loadTrolleyStops();\n        this.setState({isTrams: false});\n    }\n\n    onTramIcClick() {\n        if (this.state.tramStops === null) //load stops if they weren't\n            this.loadTramStops();\n        this.setState({isTrams: true});\n    }\n\n    //todo refactor\n    //todo split in classes\n    //todo replace margins with custom theme\n    //todo custom THEME (colors, spacing, etc)\n    //todo !!! react clear search when transport type chosen using createRef\n    //todo !!! last update time\n    //todo ! update schedule in real time\n    //todo !!! error snackbar\n    //todo !! REFACTOR TABLES, EXTRACT CLASSES\n    render() {\n        return (\n            <div className={styles.root}>\n                <MainToolbar/>\n                <Container maxWidth=\"sm\" style={{marginTop: 16, marginBottom: 16}}>\n                    <Paper elevation={2} style={{paddingTop: 16, paddingLeft: 16, paddingRight: 16, paddingBottom: 16}}>\n                        <Grid container direction=\"column\" justify=\"center\">\n                            <Typography variant=\"h5\" style={{paddingBottom: 8}}>\n                                Где {this.state.isTrams ? \"трамвай\" : \"троллейбус\"}?\n                            </Typography>\n                            <Typography color=\"textSecondary\" variant=\"body2\" style={{paddingBottom: 16}}>\n                                Выберите интересующий вас тип транспорта и укажите остановку.\n                            </Typography>\n                            <Divider variant=\"middle\"/>\n                            <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n                                <IconButton style={{margin: 8}} onClick={() => this.onTramIcClick()}\n                                            color={this.getTramColor()} aria-label=\"Трамвай\">\n                                    <TramIcon fontSize=\"large\"/>\n                                </IconButton>\n                                <IconButton style={{margin: 8}} onClick={() => this.onTrolleyIcClick()}\n                                            color={this.getTrolleyColor()} aria-label=\"Троллейбус\">\n                                    <TrolleybusIcon fontSize=\"large\"/>\n                                </IconButton>\n                            </Grid>\n                            <Divider variant=\"middle\"/>\n                            <Grid style={{marginTop: 16}} container direction=\"row\" justify=\"center\"\n                                  alignItems=\"stretch\">\n                                <CustomSearch updateSchedule={this.updateSchedule} getStops={this.getStops}/>\n                            </Grid>\n                        </Grid>\n                        <LinearProgress color=\"secondary\" style={\n                            {\n                                visibility: this.state.isScheduleLoading ? \"visible\" : \"hidden\",\n                                marginLeft: -16, marginRight: -16, marginTop: 8, marginBottom: -16\n                            }\n                        }/>\n                    </Paper>\n                    {(this.state.schedule !== null && this.state.schedule.length === 0)\n                    &&\n                    <Paper elevation={2} style={{marginTop: 16}}>\n                        <TableContainer>\n                            <Table aria-label=\"schedule table\" size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell colSpan={3}>\n                                            <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"center\">\n                                                <Typography variant=\"body2\"\n                                                            style={{flex: 1, minWidth: 0, whiteSpace: \"nowrap\", overflow: \"hidden\", textOverflow: \"ellipsis\"}}>\n                                                    <Box fontWeight=\"fontWeightMedium\">{this.state.scheduleInfo.name}</Box>\n                                                </Typography>\n                                                <Typography variant=\"body2\"\n                                                            color=\"primary\"\n                                                            style={{display: \"inline-block\"}}>\n                                                    <Box fontWeight=\"fontWeightMedium\">{this.state.lastUpdateTime}</Box>\n                                                </Typography>\n                                                <IconButton style={{display: \"inline-block\"}} aria-label=\"update\"\n                                                            size=\"small\" color=\"primary\">\n                                                    <UpdateIcon onClick={() => this.updateSchedule(this.state.scheduleInfo)}/>\n                                                </IconButton>\n                                            </Grid>\n                                        </TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    <TableRow>\n                                        <TableCell colSpan={3}>Нет данных</TableCell>\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Paper>\n                    }\n                    {\n                        (this.state.schedule !== null && this.state.schedule !== \"error\" && this.state.schedule.length !== 0)\n                        &&\n                        <Paper elevation={2} style={{marginTop: 16}}>\n                            <TableContainer>\n                                <Table aria-label=\"schedule table\" size=\"small\">\n                                    <TableHead>\n                                        <TableRow>\n                                            {/*todo extract to table header class*/}\n                                            <TableCell colSpan={3}>\n                                                <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"center\">\n                                                    <Typography variant=\"body2\"\n                                                                style={{flex: 1, minWidth: 0, whiteSpace: \"nowrap\", overflow: \"hidden\", textOverflow: \"ellipsis\"}}>\n                                                        <Box fontWeight=\"fontWeightMedium\">{this.state.scheduleInfo.name}</Box>\n                                                    </Typography>\n                                                    <Typography variant=\"body2\"\n                                                                color=\"primary\"\n                                                                style={{display: \"inline-block\"}}>\n                                                        <Box fontWeight=\"fontWeightMedium\">{this.state.lastUpdateTime}</Box>\n                                                    </Typography>\n                                                    <IconButton style={{display: \"inline-block\"}} aria-label=\"update\"\n                                                                size=\"small\" color=\"primary\">\n                                                        <UpdateIcon onClick={() => this.updateSchedule(this.state.scheduleInfo)}/>\n                                                    </IconButton>\n                                                </Grid>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow>\n                                            <TableCell>№</TableCell>\n                                            <TableCell align=\"right\">Время (мин)</TableCell>\n                                            <TableCell align=\"right\">Расстояние (м)</TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {/*todo table row needs key*/}\n                                        {this.state.schedule.map(tmp => (\n                                            <TableRow>\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    {tmp.name}\n                                                </TableCell>\n                                                <TableCell align=\"right\">{tmp.timeRemaining}</TableCell>\n                                                <TableCell align=\"right\">{tmp.distanceRemaining}</TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                        </Paper>\n                    }\n                </Container>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}