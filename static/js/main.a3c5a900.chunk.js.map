{"version":3,"sources":["CustomSearch.js","App.js","serviceWorker.js","index.js"],"names":["CustomSearch","props","state","getStops","error","setSchedule","Autocomplete","id","loading","this","length","loadingText","options","onChange","event","value","getStopSchedule","getOptionLabel","option","nameWithDirection","getOptionDisabled","style","width","renderInput","params","TextField","label","variant","console","log","fetch","then","res","json","React","Component","stopsSort","stops","sort","a","b","localeCompare","i","stopsJsonToArray","stopsJson","stop","push","App","schedule","distanceRemaining","setState","isTrams","tramStops","trolleyStops","getTrolleyColor","getTramColor","className","styles","root","AppBar","position","Toolbar","edge","marginRight","Typography","header","Container","maxWidth","marginTop","marginBottom","Paper","elevation","padding","Grid","container","direction","justify","paddingBottom","color","Divider","alignItems","IconButton","margin","onClick","aria-label","fontSize","TableContainer","component","Table","size","TableHead","TableRow","TableCell","align","TableBody","map","tmp","key","name","scope","timeRemaining","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a3c5a900.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nexport default class CustomSearch extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            getStops: this.props.getStops,\n            error:false,\n            setSchedule:this.props.setSchedule\n        };\n    }\n\n    render() {\n        return (\n            <Autocomplete\n                id=\"search\"\n                loading={this.state.getStops().length===0}\n                loadingText={\"Загрузка...\"}\n                options={this.state.getStops()}\n                onChange={(event, value) => this.getStopSchedule(value)}\n                getOptionLabel={option => option.nameWithDirection}\n                getOptionDisabled={option => option.id===-1}//loading option is disabled\n                style={{width: \"100%\"}}\n                renderInput={params => <TextField {...params} error ={this.state.error} label=\"Остановка\" variant=\"outlined\"/>}\n            />\n        );\n    }\n\n    getStopSchedule(value) {\n        console.log(value);\n        fetch(\"https://ettu-schedule.herokuapp.com/transport-near-stops/\"+value.id)\n            .then(res => res.json())\n            .then(res=>{\n                console.log(res);\n                this.state.setSchedule(res);\n                //todo process errors\n                //todo show error dialog\n                /*if(res.length!==0&&res.name!==\"error\")\n                    this.state.setSchedule(res);\n                else\n                {\n\n                }*/\n            });\n    }\n}\n","import React from 'react';\nimport styles from './App.css';\nimport CustomSearch from \"./CustomSearch\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Container from \"@material-ui/core/Container\";\nimport TramIcon from '@material-ui/icons/TramTwoTone';\nimport TrolleybusIcon from '@material-ui/icons/DirectionsBusTwoTone';\nimport ScheduleIcon from '@material-ui/icons/EventNoteTwoTone';\nimport Divider from \"@material-ui/core/Divider\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport {TableContainer} from \"@material-ui/core\";\n\nfunction stopsSort(stops) {\n    stops.sort(function (a, b) {\n        return a.nameWithDirection.localeCompare(b.nameWithDirection)\n    });\n    for (let i = 0; i < stops.length; i++)\n        console.log(stops[i].id + \": \" + stops[i].nameWithDirection);\n    return stops;\n}\n\nfunction stopsJsonToArray(stopsJson) {\n    let stops = [];\n    for (let i = 0, stop; i < stopsJson.length; i++) {\n        stop = stopsJson[i];\n        stops.push(stop);\n    }\n    return stops;\n}\n\nconst loading = [];\n\nexport default class App extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tramStops: null,\n            trolleyStops: null,\n            isTrams: true, //trams or trolleys\n            schedule: []\n        };\n    }\n\n    componentDidMount() {\n\n        fetch(\"https://ettu-schedule.herokuapp.com/tram-stops\")\n            .then(res => res.json())\n            .then(res => stopsJsonToArray(res))\n            .then(res => stopsSort(res))\n            .then(res => this.setState({tramStops: res}));\n\n        fetch(\"https://ettu-schedule.herokuapp.com/trolley-stops\")\n            .then(res => res.json())\n            .then(res => stopsJsonToArray(res))\n            .then(res => stopsSort(res))\n            .then(res => this.setState({trolleyStops: res}));\n    }\n\n    setSchedule = (schedule) => {\n        schedule.sort(function (a, b) {\n                return a.distanceRemaining.localeCompare(b.distanceRemaining);\n            }\n        );\n        console.log(schedule);\n        this.setState({schedule: schedule});\n        //todo debug when no schedule\n        /*let tmp = [{\"name\": \"5\", \"timeRemaining\": \"0\", \"distanceRemaining\": \"100\"},\n            {\"name\": \"6\", \"timeRemaining\": \"0\", \"distanceRemaining\": \"200\"},\n            {\"name\": \"5\", \"timeRemaining\": \"1\", \"distanceRemaining\": \"10\"},\n            {\"name\": \"5\", \"timeRemaining\": \"0\", \"distanceRemaining\": \"300\"}];\n\n        tmp.sort(function (a, b) {\n                return a.distanceRemaining.localeCompare(b.distanceRemaining);\n            }\n        );\n        console.log(\"set set set\");\n        console.log(tmp);\n        this.setState({schedule: tmp});*/\n    };\n\n    getStops = () => {\n        if (this.state.isTrams) {\n            if (this.state.tramStops == null)\n                return loading;\n            return this.state.tramStops;\n        } else {\n            if (this.state.trolleyStops == null)\n                return loading;\n            return this.state.trolleyStops;\n        }\n    };\n\n    getTrolleyColor = () => {\n        return this.state.isTrams ? \"default\" : \"primary\";\n    };\n\n    getTramColor = () => {\n        return this.state.isTrams ? \"primary\" : \"default\";\n    };\n\n    //todo refactor\n    //todo split in classes\n    //todo replace margins with custom theme\n    //todo custom THEME (colors, spacing, etc)\n    render() {\n        return (\n            <div className={styles.root}>\n                <AppBar position=\"static\">\n                    <Toolbar variant=\"dense\">\n                        <ScheduleIcon edge=\"start\" style={{marginRight: 16}}/>\n                        <Typography variant=\"h6\" className={styles.header}>\n                            Ettu Schedule\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n\n                <Container maxWidth=\"sm\" style={{marginTop: 16, marginBottom: 16}}>\n                    <Paper elevation={2} style={{padding: 16}}>\n                        <Grid container direction=\"column\" justify=\"center\">\n                            <Typography variant=\"h4\" style={{paddingBottom: 8}}>\n                                Где {this.state.isTrams ? \"трамвай\" : \"троллейбус\"}?\n                            </Typography>\n                            <Typography color=\"textSecondary\" variant=\"body1\" style={{paddingBottom: 16}}>\n                                Выберите интересующий вас тип транспорта, а затем введите остановку.\n                            </Typography>\n                            <Divider variant=\"middle\"/>\n                            <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n\n                                <IconButton style={{margin: 8}} onClick={() => this.setState({isTrams: true})}\n                                            color={this.getTramColor()}\n                                            aria-label=\"Трамвай\">\n                                    <TramIcon fontSize=\"large\"/>\n                                </IconButton>\n                                <IconButton style={{margin: 8}} onClick={() => this.setState({isTrams: false})}\n                                            color={this.getTrolleyColor()} aria-label=\"Троллейбус\">\n                                    <TrolleybusIcon fontSize=\"large\"/>\n                                </IconButton>\n                            </Grid>\n                            <Divider variant=\"middle\"/>\n                            <Grid style={{marginTop: 16}} container direction=\"row\" justify=\"center\"\n                                  alignItems=\"stretch\">\n                                <CustomSearch setSchedule={this.setSchedule} getStops={this.getStops}/>\n                            </Grid>\n                        </Grid>\n                    </Paper>\n\n                    {this.state.schedule.length===0?\"\":<TableContainer  component={Paper} elevation={2} style={{marginTop: 16}}>\n                        <Table aria-label=\"schedule table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>{this.state.isTrams ? \"Трамвай\" : \"Троллейбус\"}</TableCell>\n                                    <TableCell align=\"right\">Время ожидания (мин)</TableCell>\n                                    <TableCell align=\"right\">Расстояние до остановки (м)</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {this.state.schedule.map(tmp => (\n                                    <TableRow key={tmp.name}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {tmp.name}\n                                        </TableCell>\n                                        <TableCell align=\"right\">{tmp.timeRemaining}</TableCell>\n                                        <TableCell align=\"right\">{tmp.distanceRemaining}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>}\n                </Container>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// todo service worker setup\nserviceWorker.unregister();\n"],"sourceRoot":""}